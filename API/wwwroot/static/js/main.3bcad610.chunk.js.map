{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/actvity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActiivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.tsx","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","displayname","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","Date","isGoing","attendees","some","isHost","hostUsername","host","find","x","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","currentUserProfile","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","setDisplayName","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","name","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityListItemPlaceholder","Placeholder","fluid","marginTop","Segment","Group","minHeight","Header","Line","Paragraph","secondary","clearing","disabled","color","floated","vertical","size","width","attached","active","has","onChange","Reveal","animated","Content","visible","hidden","basic","e","preventDefault","handleFollow","Card","Description","str","length","substring","truncate","bio","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","SegmentGroup","Label","textAlign","marginBottom","groupedActivities","group","sub","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","verticalAlign","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","setEditMode","isCurrentUser","Tab","Pane","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","boderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.3bcad610.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n} \r\n\r\nexport class PaginatedResult<T> {\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/actvity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers[\"pagination\"];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key])\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\r\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername: string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[]\r\n}\r\n\r\nexport class Activity implements Activity {\r\n    constructor(init?: ActivityFormValues) {\r\n        Object.assign(this, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category: string = '';\r\n    description: string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues) {\r\n        if (activity) {\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.venue = activity.venue;\r\n            this.city = activity.city;\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount: number;\r\n    followingCount: number;\r\n    following: boolean;\r\n    photos?: Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.username = user.username;\r\n        this.displayName = user.displayname;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string;\r\n    url: string;\r\n    isMain: boolean;\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string;\r\n    title: string;\r\n    category: string;\r\n    date: Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/actvity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        });\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity)\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!\r\n                );\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach((activity) => {\r\n            activity.attendees.forEach((attendee) => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    currentUserProfile: Profile | null = null;\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            (activeTab) => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user?.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n            })\r\n            this.uploading = false;\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error)\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(x => x.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            runInAction(() => this.loading = false);\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateProfile(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName && profile.displayName !==\r\n                    store.userStore.user?.displayname) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.profile = { ...this.profile, ...profile as Profile };\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username &&\r\n                    this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach((profile) => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loading = false));\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => (this.loadingFollowings = false));\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username,\r\n                predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => { this.user = user });\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => { this.user = user });\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) { this.user.image = image; }\r\n    }\r\n\r\n    setDisplayName = (name: string) => {\r\n        if (this.user) this.user.displayname = name;\r\n    }\r\n\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor()\r\n    {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch((error) =>\r\n                console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach((comment) => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            })\r\n\r\n            this.hubConnection?.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch((error) => console.log('Error stopping connection: ', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n}\r\n\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { Button, Container, Dropdown, Image, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to=\"/activities\" name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to=\"/errors\" name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayname}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link}\r\n                                to={`/profiles/${user?.username}`}\r\n                                text='My Profile'\r\n                                icon='user'\r\n                            />\r\n                            <Dropdown.Item\r\n                                onClick={logout}\r\n                                text='Logout'\r\n                                icon='power'\r\n                            />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { Header, Menu } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate }, } = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All Activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date: Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent } from \"react\";\r\nimport { Button, Reveal } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string) {\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'}\r\n                />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    loading={loading}\r\n                    onClick={(e) => handleFollow(e, profile.username)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card, Icon, Image } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    function truncate(str: string | undefined) {\r\n        if (str) {\r\n            return str.length > 40 ? str.substring(0, 37) + '...' : str;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>{truncate(profile.bio)}</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} {profile.followersCount === 1 ? 'follower' : 'followers'}\r\n            </Card.Content>\r\n            <FollowButton profile={profile}/>\r\n        </Card>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { List, Image, Popup } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../../app/models/profile\";\r\nimport ProfileCard from \"../../profiles/ProfileCard\";\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor:'orange',\r\n        borderWidth: 3,\r\n    };\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular src={attendee.image || '/assets/user.png'} \r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment, SegmentGroup } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/actvity\";\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <SegmentGroup>\r\n            <Segment>\r\n                {activity.isCancelled && \r\n                <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{marginBottom: 5}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </SegmentGroup>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItemPlaceholder from \"./ActiivityListItemPlaceholder\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                <ActivityList />\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width='10'>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n})","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({errors}: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayname: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={Yup.object({\r\n                displayname: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required(),\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayname' placeholder='Display Name' />\r\n                    <MyTextInput name='username' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting}\r\n                        loading={isSubmitting} positive content='Register'\r\n                        type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Container, Header, Image, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign=\"center\" vertical className=\"masthead\">\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n})","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({inverted = true, content='Loading...'}: Props){\r\n    return(\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows: number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","export const categoryOptions = [\r\n    {text: 'Drinks', value: 'drinks'},\r\n    {text: 'Culture', value: 'culture'},\r\n    {text: 'Film', value: 'film'},\r\n    {text: 'Food', value: 'food'},\r\n    {text: 'Music', value: 'music'},\r\n    {text: 'Travel', value: 'travel'},\r\n\r\n]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from \"react-datepicker\";\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker \r\n            {...field}\r\n            {...props}\r\n            selected={(field.value && new Date(field.value)) || null}\r\n            onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { ActivityFormValues } from \"../../../app/models/actvity\";\r\n\r\nexport default observer(function ActivityForm() {\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n        loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\r\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit' />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    )\r\n})","import { Field, FieldProps, Formik, Form } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from \"yup\";\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId]);\r\n\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())\r\n                    }\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required(),\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }}>\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comments (Enter to submit, SHIFT + Enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/actvity';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {\r\n                    activity.isCancelled &&\r\n                    <Label style={{ position: 'absoulte', zIndex: 1000, left: -14, top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>\r\n                                        {activity.host?.displayName}\r\n                                    </Link>\r\n                                    </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button\r\n                            color={activity.isCancelled ? 'green' : 'red'}\r\n                            floated='left'\r\n                            basic\r\n                            content={activity.isCancelled ? 'Re-activitate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange'\r\n                            floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading} onClick={updateAttendance} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport { Activity } from '../../../app/models/actvity';\r\nimport {format} from 'date-fns';\r\n\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/actvity'\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following && (\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>)}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound(){\r\n    return(\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Opps - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>{commonStore.error.details}</code>\r\n                </Segment>\r\n\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer (function ModalContainer() {\r\n    const {modalStore} = useStore();\r\n\r\n    return(\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n})","import { Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport MyTextArea from \"../../app/common/form/MyTextArea\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\n\r\ninterface Props {\r\n    setEditMode: (editMode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ setEditMode }: Props) {\r\n    const { profileStore: { profile, updateProfile } } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{\r\n                displayName: profile?.displayName, bio:\r\n                    profile?.bio\r\n            }}\r\n            onSubmit={values => {\r\n                updateProfile(values).then(() => {\r\n                    setEditMode(false);\r\n                })\r\n            }}\r\n            validationSchema={Yup.object({\r\n                displayName: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ isSubmitting, isValid, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput placeholder='Display Name'\r\n                        name='displayName' />\r\n                    <MyTextArea rows={3} placeholder='Add your bio'\r\n                        name='bio' />\r\n                    <Button\r\n                        positive\r\n                        type='submit'\r\n                        loading={isSubmitting}\r\n                        content='Update profile'\r\n                        floated='right'\r\n                        disabled={!isValid || !dirty}\r\n                    />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport { Button, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport ProfileEditForm from \"./ProfileEditForm\";\r\nimport { observer } from 'mobx-react-lite';\r\nexport default observer(function ProfileAbout() {\r\n    const { profileStore } = useStore();\r\n    const { isCurrentUser, profile } = profileStore;\r\n    const [editMode, setEditMode] = useState(false);\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width='16'>\r\n                    <Header floated='left' icon='user' content={`About ${profile?.displayName}`} />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width='16'>\r\n                    {editMode ? <ProfileEditForm setEditMode={setEditMode} /> :\r\n                        <span style={{ whiteSpace: 'pre-wrap' }}>{profile?.bio}</span>}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as\r\n            number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100,\r\n                                        objectFit: 'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport { Card, Grid, Header, Tab } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileCard from \"./ProfileCard\";\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header\r\n                        floated='left'\r\n                        icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` : `People ${profile?.displayName} is following`}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map((profile) => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React from \"react\";\r\nimport { Cropper } from \"react-cropper\";\r\nimport \"cropperjs/dist/cropper.css\";\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\n\r\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={(cropper) => setCropper(cropper)}\r\n        />\r\n    );\r\n}","import React, { useCallback } from \"react\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { Header, Icon } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        boderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200,\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback((acceptedFiles) => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n        })))\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    );\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Grid, Header } from \"semantic-ui-react\";\r\nimport PhotoWidgetCropper from \"./PhotoWidgetCropper\";\r\nimport PhotoWidgetDropzone from \"./PhotoWidgetDropzone\";\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto: (file: Blob) => void\r\n}\r\n\r\nexport default function PhotoUploadWidget({ loading, uploadPhoto }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob((blob) => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 1 - Add Photo\" />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color=\"teal\" content=\"Step 2 - Resize image\" />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group width={2}>\r\n                            <Button\r\n                                loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button\r\n                                disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { SyntheticEvent, useState } from \"react\";\r\nimport { Card, Header, Tab, Image, Grid, Button } from \"semantic-ui-react\";\r\nimport PhotoUploadWidget from \"../../app/common/imageUpload/PhotoUploadWidget\";\r\nimport { Photo, Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto }, } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right'\r\n                            basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                name={'main' + photo.id}\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                disabled={photo.isMain}\r\n                                                onClick={(e) => handleSetMainPhoto(photo, e)}\r\n                                            />\r\n                                            <Button\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)}\r\n                                                disabled={photo.isMain}\r\n                                                name={photo.id}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Tab } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileAbout from \"./ProfileAbout\";\r\nimport ProfileActivities from \"./ProfileActivities\";\r\nimport ProfileFollowings from \"./ProfileFollowings\";\r\nimport ProfilePhotos from \"./ProfilePhotos\";\r\n\r\ninterface Props {\r\n  profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n  const { profileStore } = useStore();\r\n\r\n  const panes = [\r\n    { menuItem: 'About', render: () => <ProfileAbout /> },\r\n    { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n    { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n    { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n    { menuItem: 'Following', render: () => <ProfileFollowings /> },\r\n  ];\r\n\r\n  return (\r\n    <Tab\r\n      menu={{ fluid: true, vertical: true }}\r\n      menuPosition='right'\r\n      panes={panes}\r\n      onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n    />\r\n  )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Divider, Grid, Header, Item, Segment, Statistic, } from \"semantic-ui-react\";\r\nimport { Profile } from \"../../app/models/profile\";\r\nimport FollowButton from \"./FollowButton\";\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image\r\n                                avatar\r\n                                size='small'\r\n                                src={profile.image || '/assets/user.png'}\r\n                            />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2}>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    )\r\n})\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username, setActiveTab])\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\"\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\r\n    const { userStore: {isLoggedIn} } = useStore();\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\"\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}